using System;
using System.Collections;
using System.IO;
using System.Text;

namespace PriceListProcessor
{
    public class Processor
    {
        private string name;
        private decimal price;
        private string socket;
        private int cores;
        private double frequency;

        public string Name { get { return name; } set { name = value; } }
        public decimal Price { get { return price; } set { price = value; } }
        public string Socket { get { return socket; } set { socket = value; } }
        public int Cores { get { return cores; } set { cores = value; } }
        public double Frequency { get { return frequency; } set { frequency = value; } }

        public Processor(string name, decimal price, string socket, int cores, double frequency)
        {
            this.name = name;
            this.price = price;
            this.socket = socket;
            this.cores = cores;
            this.frequency = frequency;
        }

        public override string ToString()
        {
            return string.Format("{0} (Socket: {1}, {2} cores, {3} GHz) - ${4}", 
                name, socket, cores, frequency, price);
        }

        public string ToFileString()
        {
            return string.Format("{0}|{1}|{2}|{3}|{4}", name, price, socket, cores, frequency);
        }
    }

    public class PriceListManager
    {
        private ArrayList processors = new ArrayList();
        private string currentFilePath = "processors.txt";

        public bool LoadFromTxtFile(string filePath)
        {
            try
            {
                if (!File.Exists(filePath))
                {
                    Console.WriteLine("File not found. Created new list.");
                    currentFilePath = filePath;
                    return false;
                }

                processors.Clear();
                string[] lines = File.ReadAllLines(filePath, Encoding.ASCII);
                
                foreach (string line in lines)
                {
                    if (line == null || line.Trim() == "") continue;

                    string[] parts = line.Split('|');
                    if (parts.Length == 5)
                    {
                        string name = parts[0].Trim();
                        string socket = parts[2].Trim();
                        
                        decimal price;
                        int cores;
                        double frequency;

                        if (decimal.TryParse(parts[1], out price) &&
                            int.TryParse(parts[3], out cores) &&
                            double.TryParse(parts[4], out frequency))
                        {
                            processors.Add(new Processor(name, price, socket, cores, frequency));
                        }
                    }
                }

                currentFilePath = filePath;
                Console.WriteLine(string.Format("Successfully loaded {0} processors from {1}", 
                    processors.Count, filePath));
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(string.Format("Error loading file: {0}", ex.Message));
                return false;
            }
        }

        public bool SaveToTxtFile(string filePath)
        {
            try
            {
                string path = filePath ?? currentFilePath;
                string[] lines = new string[processors.Count];
                for (int i = 0; i < processors.Count; i++)
                {
                    lines[i] = ((Processor)processors[i]).ToFileString();
                }
                File.WriteAllLines(path, lines, Encoding.ASCII);
                Console.WriteLine(string.Format("Data saved to {0}", path));
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(string.Format("Error saving file: {0}", ex.Message));
                return false;
            }
        }

        public void AddProcessor(Processor processor)
        {
            processors.Add(processor);
        }

        public bool RemoveProcessor(int index)
        {
            if (index < 0 || index >= processors.Count)
                return false;

            processors.RemoveAt(index);
            return true;
        }

        public void DisplayAll()
        {
            if (processors.Count == 0)
            {
                Console.WriteLine("Processor list is empty!");
                return;
            }

            Console.WriteLine("\nProcessor list:");
            Console.WriteLine(new string('-', 80));
            for (int i = 0; i < processors.Count; i++)
            {
                Console.WriteLine(string.Format("{0}. {1}", i + 1, processors[i]));
            }
        }

        public void SortByName() 
        {
            processors.Sort(new NameComparer());
        }

        public void SortByPrice() 
        {
            processors.Sort(new PriceComparer());
        }

        public void SortBySocket() 
        {
            processors.Sort(new SocketComparer());
        }

        public void SortByCores() 
        {
            processors.Sort(new CoresComparer());
        }

        public void SortByFrequency() 
        {
            processors.Sort(new FrequencyComparer());
        }

        public ArrayList SearchByName(string namePart)
        {
            ArrayList results = new ArrayList();
            foreach (Processor p in processors)
            {
                if (p.Name.IndexOf(namePart) >= 0)
                    results.Add(p);
            }
            return results;
        }

        public ArrayList SearchByPrice(decimal maxPrice)
        {
            ArrayList results = new ArrayList();
            foreach (Processor p in processors)
            {
                if (p.Price <= maxPrice)
                    results.Add(p);
            }
            return results;
        }

        public ArrayList SearchBySocket(string socket)
        {
            ArrayList results = new ArrayList();
            foreach (Processor p in processors)
            {
                if (p.Socket.ToLower() == socket.ToLower())
                    results.Add(p);
            }
            return results;
        }

        public ArrayList SearchByCores(int minCores)
        {
            ArrayList results = new ArrayList();
            foreach (Processor p in processors)
            {
                if (p.Cores >= minCores)
                    results.Add(p);
            }
            return results;
        }

        public int Count { get { return processors.Count; } }
        public string CurrentFilePath { get { return currentFilePath; } }

        private class NameComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                return string.Compare(((Processor)x).Name, ((Processor)y).Name);
            }
        }

        private class PriceComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                return ((Processor)x).Price.CompareTo(((Processor)y).Price);
            }
        }

        private class SocketComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                return string.Compare(((Processor)x).Socket, ((Processor)y).Socket);
            }
        }

        private class CoresComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                return ((Processor)x).Cores.CompareTo(((Processor)y).Cores);
            }
        }

        private class FrequencyComparer : IComparer
        {
            public int Compare(object x, object y)
            {
                return ((Processor)x).Frequency.CompareTo(((Processor)y).Frequency);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.ASCII;
            Console.InputEncoding = Encoding.ASCII;

            PriceListManager manager = new PriceListManager();
            Console.WriteLine("=== CPU Price List Manager ===");

            LoadFile(manager);

            bool running = true;
            while (running)
            {
                Console.WriteLine("\nMain Menu:");
                Console.WriteLine(string.Format("Current file: {0}", manager.CurrentFilePath));
                Console.WriteLine("1. List all processors");
                Console.WriteLine("2. Add new processor");
                Console.WriteLine("3. Remove processor");
                Console.WriteLine("4. Sort list");
                Console.WriteLine("5. Search processors");
                Console.WriteLine("6. Save data");
                Console.WriteLine("7. Load different file");
                Console.WriteLine("8. Exit");
                Console.Write("Select option: ");

                string choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                        manager.DisplayAll();
                        break;

                    case "2":
                        AddNewProcessor(manager);
                        break;

                    case "3":
                        RemoveProcessor(manager);
                        break;

                    case "4":
                        SortProcessors(manager);
                        break;

                    case "5":
                        SearchProcessors(manager);
                        break;

                    case "6":
                        SaveData(manager);
                        break;

                    case "7":
                        LoadFile(manager);
                        break;

                    case "8":
                        running = false;
                        break;

                    default:
                        Console.WriteLine("Invalid input!");
                        break;
                }
            }

            Console.WriteLine("Program completed. Press any key...");
            Console.ReadKey();
        }

        static void LoadFile(PriceListManager manager)
        {
            Console.Write("\nEnter .txt file path (Enter for processors.txt): ");
            string filePath = Console.ReadLine();
            filePath = (filePath == null || filePath.Trim() == "") ? "processors.txt" : filePath;

            if (!manager.LoadFromTxtFile(filePath) && manager.Count == 0)
            {
                Console.WriteLine("\nAdded sample data:");
                manager.AddProcessor(new Processor("Intel Core i5-12400", 189.90m, "LGA1700", 6, 2.5));
                manager.AddProcessor(new Processor("AMD Ryzen 5 5600X", 179.90m, "AM4", 6, 3.7));
                manager.AddProcessor(new Processor("Intel Core i7-12700K", 349.90m, "LGA1700", 12, 3.6));
                manager.AddProcessor(new Processor("AMD Ryzen 7 5800X3D", 329.90m, "AM4", 8, 3.4));
                manager.DisplayAll();
            }
        }

        static void AddNewProcessor(PriceListManager manager)
        {
            Console.WriteLine("\nAdd new processor:");

            Console.Write("Name: ");
            string name = Console.ReadLine();

            Console.Write("Price: ");
            decimal price = ReadDecimal();

            Console.Write("Socket: ");
            string socket = Console.ReadLine();

            Console.Write("Core count: ");
            int cores = ReadInt();

            Console.Write("Frequency (GHz): ");
            double frequency = ReadDouble();

            manager.AddProcessor(new Processor(name, price, socket, cores, frequency));
            Console.WriteLine("Processor added successfully!");
        }

        static void RemoveProcessor(PriceListManager manager)
        {
            manager.DisplayAll();
            if (manager.Count == 0) return;

            Console.Write("\nEnter processor number to remove: ");
            int index;
            if (int.TryParse(Console.ReadLine(), out index) && index > 0 && index <= manager.Count)
            {
                if (manager.RemoveProcessor(index - 1))
                    Console.WriteLine("Processor removed!");
                else
                    Console.WriteLine("Removal error!");
            }
            else
            {
                Console.WriteLine("Invalid number!");
            }
        }

        static void SortProcessors(PriceListManager manager)
        {
            Console.WriteLine("\nSort by:");
            Console.WriteLine("1. Name");
            Console.WriteLine("2. Price");
            Console.WriteLine("3. Socket");
            Console.WriteLine("4. Core count");
            Console.WriteLine("5. Frequency");
            Console.Write("Select criteria: ");

            string choice = Console.ReadLine();
            switch (choice)
            {
                case "1": manager.SortByName(); break;
                case "2": manager.SortByPrice(); break;
                case "3": manager.SortBySocket(); break;
                case "4": manager.SortByCores(); break;
                case "5": manager.SortByFrequency(); break;
                default: Console.WriteLine("Invalid choice!"); return;
            }

            Console.WriteLine("Sorting completed.");
            manager.DisplayAll();
        }

        static void SearchProcessors(PriceListManager manager)
        {
            Console.WriteLine("\nSearch by:");
            Console.WriteLine("1. Name");
            Console.WriteLine("2. Price (max)");
            Console.WriteLine("3. Socket");
            Console.WriteLine("4. Core count (min)");
            Console.Write("Select criteria: ");

            string choice = Console.ReadLine();
            ArrayList results = null;
            switch (choice)
            {
                case "1":
                    Console.Write("Enter name part: ");
                    results = manager.SearchByName(Console.ReadLine());
                    break;
                case "2":
                    Console.Write("Enter max price: ");
                    results = manager.SearchByPrice(ReadDecimal());
                    break;
                case "3":
                    Console.Write("Enter socket: ");
                    results = manager.SearchBySocket(Console.ReadLine());
                    break;
                case "4":
                    Console.Write("Enter min core count: ");
                    results = manager.SearchByCores(ReadInt());
                    break;
                default:
                    Console.WriteLine("Invalid choice!");
                    return;
            }

            if (results != null && results.Count > 0)
            {
                Console.WriteLine(string.Format("\nFound {0} processors:", results.Count));
                Console.WriteLine(new string('-', 80));
                foreach (Processor p in results)
                {
                    Console.WriteLine(p);
                }
            }
            else
            {
                Console.WriteLine("No processors found.");
            }
        }

        static void SaveData(PriceListManager manager)
        {
            Console.Write("\nEnter save path (Enter for current file): ");
            string path = Console.ReadLine();
            if (path == null || path.Trim() == "")
            {
                manager.SaveToTxtFile(null);
            }
            else
            {
                manager.SaveToTxtFile(path);
            }
        }

        static decimal ReadDecimal()
        {
            decimal result;
            while (!decimal.TryParse(Console.ReadLine(), out result))
            {
                Console.Write("Invalid input. Try again: ");
            }
            return result;
        }

        static int ReadInt()
        {
            int result;
            while (!int.TryParse(Console.ReadLine(), out result))
            {
                Console.Write("Invalid input. Try again: ");
            }
            return result;
        }

        static double ReadDouble()
        {
            double result;
            while (!double.TryParse(Console.ReadLine(), out result))
            {
                Console.Write("Invalid input. Try again: ");
            }
            return result;
        }
    }
}