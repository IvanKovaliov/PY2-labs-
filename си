using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace RussianConsoleApp
{
    class Processor
    {
        public string Name { get; set; }
        public decimal Price { get; set; }
        public string Socket { get; set; }
        public int Cores { get; set; }
        public double Frequency { get; set; }

        public Processor(string name, decimal price, string socket, int cores, double frequency)
        {
            Name = name;
            Price = price;
            Socket = socket;
            Cores = cores;
            Frequency = frequency;
        }

        public override string ToString()
        {
            return string.Format("{0} (Сокет: {1}, Ядер: {2}, Частота: {3} GHz) - {4} руб.", 
                Name, Socket, Cores, Frequency, Price);
        }
    }

    class Program
    {
        static List<Processor> processors = new List<Processor>();
        static string currentFile = "processors.txt";

        static void Main(string[] args)
        {
            // Настройка кодировки консоли для русского языка
            Console.OutputEncoding = Encoding.GetEncoding(1251);
            Console.InputEncoding = Encoding.GetEncoding(1251);

            LoadData();

            bool running = true;
            while (running)
            {
                Console.WriteLine("\nМеню управления прайс-листом:");
                Console.WriteLine("1. Показать все процессоры");
                Console.WriteLine("2. Добавить процессор");
                Console.WriteLine("3. Удалить процессор");
                Console.WriteLine("4. Сохранить данные");
                Console.WriteLine("5. Загрузить другой файл");
                Console.WriteLine("6. Выход");
                Console.Write("Выберите действие: ");

                string choice = Console.ReadLine();
                Console.WriteLine();

                switch (choice)
                {
                    case "1":
                        ShowAllProcessors();
                        break;
                    case "2":
                        AddProcessor();
                        break;
                    case "3":
                        RemoveProcessor();
                        break;
                    case "4":
                        SaveData();
                        break;
                    case "5":
                        LoadData();
                        break;
                    case "6":
                        running = false;
                        break;
                    default:
                        Console.WriteLine("Неверный выбор!");
                        break;
                }
            }
        }

        static void LoadData()
        {
            Console.Write("Введите путь к файлу (Enter для processors.txt): ");
            string filePath = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(filePath))
                filePath = "processors.txt";

            currentFile = filePath;

            try
            {
                if (File.Exists(filePath))
                {
                    processors.Clear();
                    string[] lines = File.ReadAllLines(filePath, Encoding.GetEncoding(1251));
                    
                    foreach (string line in lines)
                    {
                        string[] parts = line.Split('|');
                        if (parts.Length == 5)
                        {
                            string name = parts[0];
                            decimal price = decimal.Parse(parts[1]);
                            string socket = parts[2];
                            int cores = int.Parse(parts[3]);
                            double freq = double.Parse(parts[4]);

                            processors.Add(new Processor(name, price, socket, cores, freq));
                        }
                    }
                    Console.WriteLine("Данные успешно загружены из файла: " + filePath);
                }
                else
                {
                    Console.WriteLine("Файл не найден. Создан новый список.");
                    // Добавляем тестовые данные
                    processors.Add(new Processor("Intel Core i5-12400", 18990, "LGA1700", 6, 2.5));
                    processors.Add(new Processor("AMD Ryzen 5 5600X", 17990, "AM4", 6, 3.7));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка загрузки: " + ex.Message);
            }
        }

        static void SaveData()
        {
            try
            {
                List<string> lines = new List<string>();
                foreach (Processor p in processors)
                {
                    lines.Add(string.Format("{0}|{1}|{2}|{3}|{4}", 
                        p.Name, p.Price, p.Socket, p.Cores, p.Frequency));
                }

                File.WriteAllLines(currentFile, lines, Encoding.GetEncoding(1251));
                Console.WriteLine("Данные сохранены в файл: " + currentFile);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка сохранения: " + ex.Message);
            }
        }

        static void ShowAllProcessors()
        {
            if (processors.Count == 0)
            {
                Console.WriteLine("Список процессоров пуст!");
                return;
            }

            Console.WriteLine("Список процессоров:");
            Console.WriteLine("----------------------------------------");
            for (int i = 0; i < processors.Count; i++)
            {
                Console.WriteLine("{0}. {1}", i + 1, processors[i]);
            }
        }

        static void AddProcessor()
        {
            Console.WriteLine("Добавление нового процессора:");
            
            Console.Write("Название: ");
            string name = Console.ReadLine();
            
            Console.Write("Цена: ");
            decimal price = ReadDecimal();
            
            Console.Write("Сокет: ");
            string socket = Console.ReadLine();
            
            Console.Write("Количество ядер: ");
            int cores = ReadInt();
            
            Console.Write("Частота (GHz): ");
            double freq = ReadDouble();

            processors.Add(new Processor(name, price, socket, cores, freq));
            Console.WriteLine("Процессор успешно добавлен!");
        }

        static void RemoveProcessor()
        {
            ShowAllProcessors();
            if (processors.Count == 0) return;

            Console.Write("Введите номер процессора для удаления: ");
            int index = ReadInt();
            
            if (index > 0 && index <= processors.Count)
            {
                processors.RemoveAt(index - 1);
                Console.WriteLine("Процессор удален!");
            }
            else
            {
                Console.WriteLine("Неверный номер!");
            }
        }

        static decimal ReadDecimal()
        {
            decimal result;
            while (!decimal.TryParse(Console.ReadLine(), out result))
            {
                Console.Write("Некорректный ввод. Введите число: ");
            }
            return result;
        }

        static int ReadInt()
        {
            int result;
            while (!int.TryParse(Console.ReadLine(), out result))
            {
                Console.Write("Некорректный ввод. Введите целое число: ");
            }
            return result;
        }

        static double ReadDouble()
        {
            double result;
            while (!double.TryParse(Console.ReadLine(), out result))
            {
                Console.Write("Некорректный ввод. Введите число: ");
            }
            return result;
        }
    }
}