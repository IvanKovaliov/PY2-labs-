using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace RussianPriceListProcessor
{
    public class Processor
    {
        public string Название { get; set; }
        public decimal Цена { get; set; }
        public string Сокет { get; set; }
        public int Ядра { get; set; }
        public double Частота { get; set; }

        public Processor(string название, decimal цена, string сокет, int ядра, double частота)
        {
            Название = название;
            Цена = цена;
            Сокет = сокет;
            Ядра = ядра;
            Частота = частота;
        }

        public override string ToString()
        {
            return $"{Название} (Сокет: {Сокет}, {Ядра} ядер, {Частота} GHz) - {Цена} руб.";
        }

        public string ToFileString()
        {
            return $"{Название}|{Цена}|{Сокет}|{Ядра}|{Частота}";
        }
    }

    public class МенеджерПрайслиста
    {
        private List<Processor> процессоры = new List<Processor>();
        private string текущийФайл = "процессоры.txt";

        public bool ЗагрузитьИзФайла(string путьФайла)
        {
            try
            {
                if (!File.Exists(путьФайла))
                {
                    Console.WriteLine("Файл не найден. Создан новый список.");
                    текущийФайл = путьФайла;
                    return false;
                }

                процессоры.Clear();
                string[] строки = File.ReadAllLines(путьФайла, Encoding.GetEncoding(1251));
                
                foreach (string строка in строки)
                {
                    if (string.IsNullOrWhiteSpace(строка)) continue;

                    string[] части = строка.Split('|');
                    if (части.Length == 5)
                    {
                        string название = части[0].Trim();
                        string сокет = части[2].Trim();
                        
                        if (decimal.TryParse(части[1], out decimal цена) &&
                            int.TryParse(части[3], out int ядра) &&
                            double.TryParse(части[4], out double частота))
                        {
                            процессоры.Add(new Processor(название, цена, сокет, ядра, частота));
                        }
                    }
                }

                текущийФайл = путьФайла;
                Console.WriteLine($"Успешно загружено {процессоры.Count} процессоров из {путьФайла}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка загрузки файла: {ex.Message}");
                return false;
            }
        }

        public bool СохранитьВФайл(string путьФайла = null)
        {
            try
            {
                string путь = путьФайла ?? текущийФайл;
                List<string> строки = процессоры.Select(p => p.ToFileString()).ToList();
                File.WriteAllLines(путь, строки, Encoding.GetEncoding(1251));
                Console.WriteLine($"Данные сохранены в {путь}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка сохранения файла: {ex.Message}");
                return false;
            }
        }

        public void ДобавитьПроцессор(Processor процессор)
        {
            процессоры.Add(процессор);
        }

        public bool УдалитьПроцессор(int индекс)
        {
            if (индекс < 0 || индекс >= процессоры.Count)
                return false;

            процессоры.RemoveAt(индекс);
            return true;
        }

        public void ПоказатьВсе()
        {
            if (процессоры.Count == 0)
            {
                Console.WriteLine("Список процессоров пуст!");
                return;
            }

            Console.WriteLine("\nСписок процессоров:");
            Console.WriteLine(new string('-', 80));
            for (int i = 0; i < процессоры.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {процессоры[i]}");
            }
        }

        public void СортироватьПоНазванию() => процессоры.Sort((a, b) => a.Название.CompareTo(b.Название));
        public void СортироватьПоЦене() => процессоры.Sort((a, b) => a.Цена.CompareTo(b.Цена));
        public void СортироватьПоСокету() => процессоры.Sort((a, b) => a.Сокет.CompareTo(b.Сокет));
        public void СортироватьПоЯдрам() => процессоры.Sort((a, b) => a.Ядра.CompareTo(b.Ядра));
        public void СортироватьПоЧастоте() => процессоры.Sort((a, b) => a.Частота.CompareTo(b.Частота));

        public List<Processor> ПоискПоНазванию(string частьНазвания) => 
            процессоры.Where(p => p.Название.Contains(частьНазвания)).ToList();

        public List<Processor> ПоискПоЦене(decimal максЦена) => 
            процессоры.Where(p => p.Цена <= максЦена).ToList();

        public List<Processor> ПоискПоСокету(string сокет) => 
            процессоры.Where(p => p.Сокет.Equals(сокет, StringComparison.OrdinalIgnoreCase)).ToList();

        public List<Processor> ПоискПоЯдрам(int минЯдра) => 
            процессоры.Where(p => p.Ядра >= минЯдра).ToList();

        public int Количество => процессоры.Count;
        public string ТекущийФайл => текущийФайл;
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Настройка кодировок для поддержки русского языка
            Console.OutputEncoding = Encoding.GetEncoding(1251);
            Console.InputEncoding = Encoding.GetEncoding(1251);

            МенеджерПрайслиста менеджер = new МенеджерПрайслиста();
            Console.WriteLine("=== Управление прайс-листом процессоров ===");

            // Загрузка файла
            ЗагрузитьФайл(менеджер);

            bool работает = true;
            while (работает)
            {
                Console.WriteLine("\nГлавное меню:");
                Console.WriteLine($"Текущий файл: {менеджер.ТекущийФайл}");
                Console.WriteLine("1. Просмотреть все процессоры");
                Console.WriteLine("2. Добавить процессор");
                Console.WriteLine("3. Удалить процессор");
                Console.WriteLine("4. Сортировать список");
                Console.WriteLine("5. Поиск процессоров");
                Console.WriteLine("6. Сохранить данные");
                Console.WriteLine("7. Загрузить другой файл");
                Console.WriteLine("8. Выход");
                Console.Write("Выберите действие: ");

                switch (Console.ReadLine())
                {
                    case "1":
                        менеджер.ПоказатьВсе();
                        break;

                    case "2":
                        ДобавитьНовыйПроцессор(менеджер);
                        break;

                    case "3":
                        УдалитьПроцессор(менеджер);
                        break;

                    case "4":
                        СортироватьПроцессоры(менеджер);
                        break;

                    case "5":
                        ИскатьПроцессоры(менеджер);
                        break;

                    case "6":
                        СохранитьДанные(менеджер);
                        break;

                    case "7":
                        ЗагрузитьФайл(менеджер);
                        break;

                    case "8":
                        работает = false;
                        break;

                    default:
                        Console.WriteLine("Неверный ввод!");
                        break;
                }
            }

            Console.WriteLine("Программа завершена. Нажмите любую клавишу...");
            Console.ReadKey();
        }

        static void ЗагрузитьФайл(МенеджерПрайслиста менеджер)
        {
            Console.Write("\nВведите путь к файлу .txt (Enter для процессоры.txt): ");
            string путьФайла = Console.ReadLine();
            путьФайла = string.IsNullOrWhiteSpace(путьФайла) ? "процессоры.txt" : путьФайла;

            if (!менеджер.ЗагрузитьИзФайла(путьФайла) && менеджер.Количество == 0)
            {
                Console.WriteLine("\nДобавлены демонстрационные данные:");
                менеджер.ДобавитьПроцессор(new Processor("Intel Core i5-12400", 18990, "LGA1700", 6, 2.5));
                менеджер.ДобавитьПроцессор(new Processor("AMD Ryzen 5 5600X", 17990, "AM4", 6, 3.7));
                менеджер.ДобавитьПроцессор(new Processor("Intel Core i7-12700K", 34990, "LGA1700", 12, 3.6));
                менеджер.ДобавитьПроцессор(new Processor("AMD Ryzen 7 5800X3D", 32990, "AM4", 8, 3.4));
                менеджер.ПоказатьВсе();
            }
        }

        static void ДобавитьНовыйПроцессор(МенеджерПрайслиста менеджер)
        {
            Console.WriteLine("\nДобавление нового процессора:");

            Console.Write("Название: ");
            string название = Console.ReadLine();

            Console.Write("Цена: ");
            decimal цена = ПрочитатьDecimal();

            Console.Write("Сокет: ");
            string сокет = Console.ReadLine();

            Console.Write("Количество ядер: ");
            int ядра = ПрочитатьInt();

            Console.Write("Частота (GHz): ");
            double частота = ПрочитатьDouble();

            менеджер.ДобавитьПроцессор(new Processor(название, цена, сокет, ядра, частота));
            Console.WriteLine("Процессор успешно добавлен!");
        }

        static void УдалитьПроцессор(МенеджерПрайслиста менеджер)
        {
            менеджер.ПоказатьВсе();
            if (менеджер.Количество == 0) return;

            Console.Write("\nВведите номер процессора для удаления: ");
            if (int.TryParse(Console.ReadLine(), out int индекс) && индекс > 0 && индекс <= менеджер.Количество)
            {
                if (менеджер.УдалитьПроцессор(индекс - 1))
                    Console.WriteLine("Процессор удален!");
                else
                    Console.WriteLine("Ошибка удаления!");
            }
            else
            {
                Console.WriteLine("Некорректный номер!");
            }
        }

        static void СортироватьПроцессоры(МенеджерПрайслиста менеджер)
        {
            Console.WriteLine("\nСортировать по:");
            Console.WriteLine("1. Названию");
            Console.WriteLine("2. Цене");
            Console.WriteLine("3. Сокету");
            Console.WriteLine("4. Количеству ядер");
            Console.WriteLine("5. Частоте");
            Console.Write("Выберите критерий: ");

            switch (Console.ReadLine())
            {
                case "1": менеджер.СортироватьПоНазванию(); break;
                case "2": менеджер.СортироватьПоЦене(); break;
                case "3": менеджер.СортироватьПоСокету(); break;
                case "4": менеджер.СортироватьПоЯдрам(); break;
                case "5": менеджер.СортироватьПоЧастоте(); break;
                default: Console.WriteLine("Неверный выбор!"); return;
            }

            Console.WriteLine("Сортировка выполнена.");
            менеджер.ПоказатьВсе();
        }

        static void ИскатьПроцессоры(МенеджерПрайслиста менеджер)
        {
            Console.WriteLine("\nПоиск по:");
            Console.WriteLine("1. Названию");
            Console.WriteLine("2. Цене (максимальной)");
            Console.WriteLine("3. Сокету");
            Console.WriteLine("4. Количеству ядер (минимальному)");
            Console.Write("Выберите критерий: ");

            List<Processor> результаты = null;
            switch (Console.ReadLine())
            {
                case "1":
                    Console.Write("Введите часть названия: ");
                    результаты = менеджер.ПоискПоНазванию(Console.ReadLine());
                    break;
                case "2":
                    Console.Write("Введите максимальную цену: ");
                    результаты = менеджер.ПоискПоЦене(ПрочитатьDecimal());
                    break;
                case "3":
                    Console.Write("Введите сокет: ");
                    результаты = менеджер.ПоискПоСокету(Console.ReadLine());
                    break;
                case "4":
                    Console.Write("Введите минимальное количество ядер: ");
                    результаты = менеджер.ПоискПоЯдрам(ПрочитатьInt());
                    break;
                default:
                    Console.WriteLine("Неверный выбор!");
                    return;
            }

            if (результаты != null && результаты.Count > 0)
            {
                Console.WriteLine($"\nНайдено {результаты.Count} процессоров:");
                Console.WriteLine(new string('-', 80));
                foreach (var p in результаты)
                {
                    Console.WriteLine(p);
                }
            }
            else
            {
                Console.WriteLine("Процессоры не найдены.");
            }
        }

        static void СохранитьДанные(МенеджерПрайслиста менеджер)
        {
            Console.Write("\nВведите путь для сохранения (Enter для текущего файла): ");
            string путь = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(путь))
            {
                менеджер.СохранитьВФайл();
            }
            else
            {
                менеджер.СохранитьВФайл(путь);
            }
        }

        static decimal ПрочитатьDecimal()
        {
            decimal результат;
            while (!decimal.TryParse(Console.ReadLine(), out результат))
            {
                Console.Write("Некорректный ввод. Попробуйте снова: ");
            }
            return результат;
        }

        static int ПрочитатьInt()
        {
            int результат;
            while (!int.TryParse(Console.ReadLine(), out результат))
            {
                Console.Write("Некорректный ввод. Попробуйте снова: ");
            }
            return результат;
        }

        static double ПрочитатьDouble()
        {
            double результат;
            while (!double.TryParse(Console.ReadLine(), out результат))
            {
                Console.Write("Некорректный ввод. Попробуйте снова: ");
            }
            return результат;
        }
    }
}