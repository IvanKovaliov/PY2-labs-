using System;
using System.Collections;
using System.Collections.Generic;

// Класс Data с полями char, string, long
public class Data : IComparable<Data>
{
    public char Field1 { get; set; }
    public string Field2 { get; set; }
    public long Field3 { get; set; }

    // Конструктор для удобной инициализации
    public Data(char field1, string field2, long field3)
    {
        Field1 = field1;
        Field2 = field2;
        Field3 = field3;
    }

    // Реализация метода CompareTo для сортировки по полю Field2 (string) по умолчанию
    public int CompareTo(Data other)
    {
        return this.Field2.CompareTo(other.Field2);
    }

    // Переопределение метода ToString для удобного вывода
    public override string ToString()
    {
        return string.Format("Field1: {0}, Field2: {1}, Field3: {2}", Field1, Field2, Field3);
    }
}

// Класс DataList, содержащий список объектов Data
public class DataList : IEnumerable<Data>
{
    private List<Data> dataList = new List<Data>();

    // Метод для добавления одного элемента в список
    public void Add(Data data)
    {
        dataList.Add(data);
    }

    // Метод для добавления нескольких элементов в список
    public void AddRange(IEnumerable<Data> dataCollection)
    {
        dataList.AddRange(dataCollection);
    }

    // Метод для сортировки списка по указанному полю
    public void Sort(Comparison<Data> comparison)
    {
        dataList.Sort(comparison);
    }

    // Реализация интерфейса IEnumerable<Data>
    public IEnumerator<Data> GetEnumerator()
    {
        return dataList.GetEnumerator();
    }

    // Реализация необобщенного метода GetEnumerator
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Создание объекта DataList
        DataList list = new DataList();

        // Добавление нескольких объектов Data в список
        list.AddRange(new List<Data>
        {
            new Data('A', "Zebra", 100),
            new Data('B', "Apple", 200),
            new Data('C', "Banana", 300),
            new Data('D', "Orange", 400),
            new Data('E', "Grape", 500)
        });

        // Вывод исходного списка
        Console.WriteLine("Исходный список:");
        foreach (var data in list)
        {
            Console.WriteLine(data.ToString());
        }

        // Сортировка списка по полю Field2 (string) по умолчанию
        list.Sort((x, y) => x.CompareTo(y));
        Console.WriteLine("\nОтсортированный список по Field2 (string):");
        foreach (var data in list)
        {
            Console.WriteLine(data.ToString());
        }

        // Сортировка списка по полю Field1 (char)
        list.Sort((x, y) => x.Field1.CompareTo(y.Field1));
        Console.WriteLine("\nОтсортированный список по Field1 (char):");
        foreach (var data in list)
        {
            Console.WriteLine(data.ToString());
        }

        // Сортировка списка по полю Field3 (long)
        list.Sort((x, y) => x.Field3.CompareTo(y.Field3));
        Console.WriteLine("\nОтсортированный список по Field3 (long):");
        foreach (var data in list)
        {
            Console.WriteLine(data.ToString());
        }
    }
}