#include <windows.h>
#include <tchar.h>
#include <math.h>
#include "resource.h"

#define WINDOW_WIDTH 450
#define WINDOW_HEIGHT 200

HINSTANCE hInst;
double* X = NULL;
double* Y = NULL;
int N = 0;
double xn = 0.0, xk = 0.0;
BOOL isCalculated = FALSE;

// Прототипы функций
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK InputDlgProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK ResultDlgProc(HWND, UINT, WPARAM, LPARAM);
double CalculateFunction(double x);

// Регистрация класса окна
void RegisterWindowClass() {
    WNDCLASS wc = {0};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(NULL, IDC_SIZEALL);
    wc.hbrBackground = (HBRUSH)GetStockObject(LTGRAY_BRUSH);
    wc.lpszClassName = _T("Lab3Window");
    RegisterClass(&wc);
}

// Оконная процедура
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    static HFONT hFont = CreateFont(16, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE, DEFAULT_CHARSET,
                                    OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
                                    DEFAULT_PITCH | FF_SWISS, _T("Arial"));

    switch (message) {
    case WM_COMMAND:
        switch (LOWORD(wParam)) {
        case ID_FUNCTION_INPUT:
            DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG1), hWnd, InputDlgProc);
            isCalculated = FALSE;
            break;
        case ID_FUNCTION_CALCULATE:
            if (N > 0) {
                if (X) delete[] X;
                if (Y) delete[] Y;
                X = new double[N];
                Y = new double[N];
                double hx = (xk - xn) / (N - 1);
                X[0] = xn;
                for (int i = 0; i < N; i++) {
                    if (i > 0) X[i] = X[i - 1] + hx;
                    Y[i] = CalculateFunction(X[i]);
                }
                isCalculated = TRUE;
                DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG2), hWnd, ResultDlgProc);
            } else {
                MessageBox(hWnd, _T("Ошибка: указано неверное число точек!"), _T("Ошибка"), MB_OK | MB_ICONERROR);
            }
            break;
        case ID_FUNCTION_GRAPH:
            if (isCalculated) {
                InvalidateRect(hWnd, NULL, TRUE);
            } else {
                MessageBox(hWnd, _T("Сначала выполните расчет функции!"), _T("Ошибка"), MB_OK | MB_ICONWARNING);
            }
            break;
        case ID_ABOUT:
            MessageBox(hWnd, _T("Лабораторная работа 17\nВариант 3\nСтудент: [Ваше имя]\nФункция: f(x) = 30*sin(5-3x)"),
                       _T("О программе"), MB_OK | MB_ICONINFORMATION);
            break;
        }
        break;
    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hWnd, &ps);
        SelectObject(hdc, hFont);

        if (isCalculated && X && Y) {
            double minY = Y[0], maxY = Y[0];
            for (int i = 1; i < N; i++) {
                if (Y[i] < minY) minY = Y[i];
                if (Y[i] > maxY) maxY = Y[i];
            }
            double scaleX = WINDOW_WIDTH / (xk - xn);
            double scaleY = WINDOW_HEIGHT / (maxY - minY);
            int zeroY = (int)(WINDOW_HEIGHT - (0 - minY) * scaleY);

            HPEN hPen = CreatePen(PS_SOLID, 1, RGB(0, 0, 255));
            SelectObject(hdc, hPen);
            MoveToEx(hdc, (int)((X[0] - xn) * scaleX), (int)(WINDOW_HEIGHT - (Y[0] - minY) * scaleY), NULL);
            for (int i = 1; i < N; i++) {
                LineTo(hdc, (int)((X[i] - xn) * scaleX), (int)(WINDOW_HEIGHT - (Y[i] - minY) * scaleY));
            }
            DeleteObject(hPen);

HPEN hAxisPen = CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
            SelectObject(hdc, hAxisPen);
            MoveToEx(hdc, 0, zeroY, NULL);
            LineTo(hdc, WINDOW_WIDTH, zeroY);
            MoveToEx(hdc, 0, 0, NULL);
            LineTo(hdc, 0, WINDOW_HEIGHT);
            DeleteObject(hAxisPen);
        }
        EndPaint(hWnd, &ps);
        break;
    }
    case WM_DESTROY:
        if (X) delete[] X;
        if (Y) delete[] Y;
        DeleteObject(hFont);
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Диалог ввода данных
INT_PTR CALLBACK InputDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) {
    TCHAR buf[32];
    switch (message) {
    case WM_INITDIALOG:
        _stprintf_s(buf, _T("%.3f"), xn);
        SetDlgItemText(hDlg, IDC_EDIT1, buf);
        _stprintf_s(buf, _T("%.3f"), xk);
        SetDlgItemText(hDlg, IDC_EDIT2, buf);
        _stprintf_s(buf, _T("%d"), N);
        SetDlgItemText(hDlg, IDC_EDIT3, buf);
        return TRUE;
    case WM_COMMAND:
        switch (LOWORD(wParam)) {
        case IDOK:
            GetDlgItemText(hDlg, IDC_EDIT1, buf, 32);
            xn = _wtof(buf);
            GetDlgItemText(hDlg, IDC_EDIT2, buf, 32);
            xk = _wtof(buf);
            GetDlgItemText(hDlg, IDC_EDIT3, buf, 32);
            N = _wtoi(buf);
            EndDialog(hDlg, IDOK);
            return TRUE;
        case IDCANCEL:
            EndDialog(hDlg, IDCANCEL);
            return TRUE;
        }
        break;
    }
    return FALSE;
}

// Диалог вывода результатов
INT_PTR CALLBACK ResultDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) {
    TCHAR buf[128];
    switch (message) {
    case WM_INITDIALOG:
        for (int i = 0; i < N; i++) {
            _stprintf_s(buf, _T("%d: X = %.3f, Y = %.3f"), i, X[i], Y[i]);
            SendDlgItemMessage(hDlg, IDC_LIST1, LB_ADDSTRING, 0, (LPARAM)buf);
        }
        return TRUE;
    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK) {
            EndDialog(hDlg, IDOK);
            return TRUE;
        }
        break;
    }
    return FALSE;
}

// Расчет функции
double CalculateFunction(double x) {
    return 30 * sin(5 - 3 * x);
}

// Точка входа
int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE, LPTSTR, int nCmdShow) {
    hInst = hInstance;
    RegisterWindowClass();

    HWND hWnd = CreateWindow(_T("Lab3Window"), _T("Lab 17 Variant 3"), WS_OVERLAPPEDWINDOW,
                             CW_USEDEFAULT, 0, WINDOW_WIDTH, WINDOW_HEIGHT, NULL, NULL, hInst, NULL);
    HACCEL hAccel = LoadAccelerators(hInst, MAKEINTRESOURCE(IDR_MENU1));
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        if (!IsDialogMessage(hWnd, &msg)) {
            TranslateAccelerator(hWnd, hAccel, &msg);
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }
    return (int)msg.wParam;
}