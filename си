using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace AdvancedPriceList2010
{
    // Класс для представления процессора
    class Processor : IComparable<Processor>
    {
        public string Name { get; set; }
        public decimal Price { get; set; }
        public string Socket { get; set; }
        public int Cores { get; set; }
        public double Frequency { get; set; }

        public Processor(string name, decimal price, string socket, int cores, double freq)
        {
            Name = name;
            Price = price;
            Socket = socket;
            Cores = cores;
            Frequency = freq;
        }

        public int CompareTo(Processor other)
        {
            return this.Name.CompareTo(other.Name);
        }

        public override string ToString()
        {
            return string.Format("{0} (Socket: {1}, {2} ядер, {3} GHz) - {4} руб.", 
                Name, Socket, Cores, Frequency, Price);
        }

        public string ToFileString()
        {
            return string.Format("{0}|{1}|{2}|{3}|{4}", Name, Price, Socket, Cores, Frequency);
        }
    }

    // Класс для работы с прайс-листом
    class PriceListManager
    {
        private List<Processor> processors = new List<Processor>();
        private string currentFilePath = "processors.txt";

        // Загрузка данных из файла
        public bool LoadFromFile(string filePath)
        {
            try
            {
                if (!File.Exists(filePath))
                {
                    Console.WriteLine("Файл не найден. Будет создан новый.");
                    currentFilePath = filePath;
                    return false;
                }

                processors.Clear();
                using (StreamReader reader = new StreamReader(filePath, Encoding.UTF8))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        if (string.IsNullOrWhiteSpace(line)) continue;

                        string[] parts = line.Split('|');
                        if (parts.Length == 5)
                        {
                            string name = parts[0];
                            decimal price;
                            int cores;
                            double freq;

                            if (decimal.TryParse(parts[1], out price) && 
                                int.TryParse(parts[3], out cores) && 
                                double.TryParse(parts[4], out freq))
                            {
                                processors.Add(new Processor(
                                    name, 
                                    price, 
                                    parts[2], 
                                    cores, 
                                    freq));
                            }
                        }
                    }
                }
                currentFilePath = filePath;
                Console.WriteLine("Данные успешно загружены из: " + filePath);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка загрузки: " + ex.Message);
                return false;
            }
        }

        // Сохранение данных в файл
        public bool SaveToFile(string filePath = null)
        {
            try
            {
                string path = filePath ?? currentFilePath;
                using (StreamWriter writer = new StreamWriter(path, false, Encoding.UTF8))
                {
                    foreach (Processor p in processors)
                    {
                        writer.WriteLine(p.ToFileString());
                    }
                }
                Console.WriteLine("Данные сохранены в: " + path);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка сохранения: " + ex.Message);
                return false;
            }
        }

        // Добавление нового процессора
        public void AddProcessor(Processor processor)
        {
            processors.Add(processor);
        }

        // Добавление нового процессора с консоли
        public void AddProcessorFromConsole()
        {
            Console.WriteLine("\nДобавление нового процессора:");
            
            Console.Write("Название: ");
            string name = Console.ReadLine();
            
            Console.Write("Цена: ");
            decimal price;
            while (!decimal.TryParse(Console.ReadLine(), out price))
            {
                Console.Write("Некорректная цена. Введите снова: ");
            }
            
            Console.Write("Сокет: ");
            string socket = Console.ReadLine();
            
            Console.Write("Количество ядер: ");
            int cores;
            while (!int.TryParse(Console.ReadLine(), out cores))
            {
                Console.Write("Некорректное число. Введите снова: ");
            }
            
            Console.Write("Частота (GHz): ");
            double freq;
            while (!double.TryParse(Console.ReadLine(), out freq))
            {
                Console.Write("Некорректное значение. Введите снова: ");
            }

            AddProcessor(new Processor(name, price, socket, cores, freq));
            Console.WriteLine("Процессор успешно добавлен!");
        }

        // Вывод всех процессоров
        public void DisplayAll()
        {
            if (processors.Count == 0)
            {
                Console.WriteLine("Список процессоров пуст!");
                return;
            }

            Console.WriteLine("\nСписок процессоров:");
            Console.WriteLine("----------------------------------------------------------------");
            for (int i = 0; i < processors.Count; i++)
            {
                Console.WriteLine("{0}. {1}", i + 1, processors[i]);
            }
        }

        // Сортировка по разным критериям
        public void SortBy(Func<Processor, IComparable> keySelector, string sortName)
        {
            processors.Sort((x, y) => keySelector(x).CompareTo(keySelector(y)));
            Console.WriteLine("\nСортировка по {0} выполнена.", sortName);
        }

        // Поиск по критериям
        public List<Processor> Search(Func<Processor, bool> predicate)
        {
            return processors.FindAll(new Predicate<Processor>(predicate));
        }

        // Удаление процессора
        public bool RemoveProcessor(int index)
        {
            if (index < 0 || index >= processors.Count)
                return false;

            processors.RemoveAt(index);
            return true;
        }

        // Получение количества процессоров
        public int Count
        {
            get { return processors.Count; }
        }

        // Получение текущего пути файла
        public string CurrentFilePath
        {
            get { return currentFilePath; }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            Console.InputEncoding = Encoding.GetEncoding(1251);

            PriceListManager manager = new PriceListManager();
            
            // Загрузка файла при запуске
            Console.WriteLine("Программа управления прайс-листом процессоров");
            Console.Write("Введите путь к файлу данных (Enter для processors.txt): ");
            string filePath = Console.ReadLine();
            
            if (string.IsNullOrWhiteSpace(filePath))
                filePath = "processors.txt";

            if (!manager.LoadFromFile(filePath))
            {
                // Добавление демо-данных если файл не загрузился
                Console.WriteLine("\nДобавляем демонстрационные данные...");
                manager.AddProcessor(new Processor("Intel Core i5-12400", 18990, "LGA1700", 6, 2.5));
                manager.AddProcessor(new Processor("AMD Ryzen 5 5600X", 17990, "AM4", 6, 3.7));
                manager.AddProcessor(new Processor("Intel Core i7-12700K", 34990, "LGA1700", 12, 3.6));
                manager.AddProcessor(new Processor("AMD Ryzen 7 5800X3D", 32990, "AM4", 8, 3.4));
                manager.SaveToFile();
            }

            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("\n=== ГЛАВНОЕ МЕНЮ ===");
                Console.WriteLine("Текущий файл: {0}", manager.CurrentFilePath);
                Console.WriteLine("1. Просмотреть все процессоры");
                Console.WriteLine("2. Добавить процессор");
                Console.WriteLine("3. Удалить процессор");
                Console.WriteLine("4. Сортировать список");
                Console.WriteLine("5. Поиск процессоров");
                Console.WriteLine("6. Сохранить данные");
                Console.WriteLine("7. Загрузить другой файл");
                Console.WriteLine("8. Выход");
                Console.Write("Выберите действие: ");

                string choice = Console.ReadLine();
                Console.WriteLine();

                switch (choice)
                {
                    case "1": // Просмотр
                        manager.DisplayAll();
                        break;

                    case "2": // Добавление
                        manager.AddProcessorFromConsole();
                        break;

                    case "3": // Удаление
                        manager.DisplayAll();
                        if (manager.Count > 0)
                        {
                            Console.Write("\nВведите номер процессора для удаления: ");
                            int index;
                            if (int.TryParse(Console.ReadLine(), out index) && index > 0 && index <= manager.Count)
                            {
                                if (manager.RemoveProcessor(index - 1))
                                    Console.WriteLine("Процессор удален!");
                                else
                                    Console.WriteLine("Ошибка удаления!");
                            }
                            else
                            {
                                Console.WriteLine("Некорректный номер!");
                            }
                        }
                        break;

                    case "4": // Сортировка
                        Console.WriteLine("Сортировать по:");
                        Console.WriteLine("1. Названию");
                        Console.WriteLine("2. Цене");
                        Console.WriteLine("3. Сокету");
                        Console.WriteLine("4. Количеству ядер");
                        Console.WriteLine("5. Частоте");
                        Console.Write("Выберите критерий: ");
                        
                        string sortChoice = Console.ReadLine();
                        switch (sortChoice)
                        {
                            case "1":
                                manager.SortBy(p => p.Name, "названию");
                                break;
                            case "2":
                                manager.SortBy(p => p.Price, "цене");
                                break;
                            case "3":
                                manager.SortBy(p => p.Socket, "сокету");
                                break;
                            case "4":
                                manager.SortBy(p => p.Cores, "количеству ядер");
                                break;
                            case "5":
                                manager.SortBy(p => p.Frequency, "частоте");
                                break;
                            default:
                                Console.WriteLine("Неверный выбор!");
                                break;
                        }
                        manager.DisplayAll();
                        break;

                    case "5": // Поиск
                        Console.WriteLine("Поиск по:");
                        Console.WriteLine("1. Названию");
                        Console.WriteLine("2. Цене (до указанной)");
                        Console.WriteLine("3. Сокету");
                        Console.WriteLine("4. Количеству ядер (не менее)");
                        Console.Write("Выберите критерий: ");
                        
                        string searchChoice = Console.ReadLine();
                        List<Processor> results = null;
                        
                        switch (searchChoice)
                        {
                            case "1":
                                Console.Write("Введите часть названия: ");
                                string namePart = Console.ReadLine();
                                results = manager.Search(p => p.Name.Contains(namePart));
                                break;
                            case "2":
                                Console.Write("Введите максимальную цену: ");
                                decimal maxPrice;
                                if (decimal.TryParse(Console.ReadLine(), out maxPrice))
                                    results = manager.Search(p => p.Price <= maxPrice);
                                break;
                            case "3":
                                Console.Write("Введите сокет: ");
                                string socket = Console.ReadLine();
                                results = manager.Search(p => p.Socket.Equals(socket, StringComparison.OrdinalIgnoreCase)));
                                break;
                            case "4":
                                Console.Write("Введите минимальное количество ядер: ");
                                int minCores;
                                if (int.TryParse(Console.ReadLine(), out minCores))
                                    results = manager.Search(p => p.Cores >= minCores);
                                break;
                            default:
                                Console.WriteLine("Неверный выбор!");
                                break;
                        }
                        
                        if (results != null)
                        {
                            Console.WriteLine("\nРезультаты поиска ({0} шт.):", results.Count);
                            Console.WriteLine("---------------------------");
                            foreach (Processor p in results)
                            {
                                Console.WriteLine(p);
                            }
                        }
                        break;

                    case "6": // Сохранение
                        Console.Write("Введите путь для сохранения (Enter для текущего файла): ");
                        string savePath = Console.ReadLine();
                        if (!string.IsNullOrWhiteSpace(savePath))
                        {
                            manager.SaveToFile(savePath);
                        }
                        else
                        {
                            manager.SaveToFile();
                        }
                        break;

                    case "7": // Загрузка другого файла
                        Console.Write("Введите путь к новому файлу: ");
                        string newPath = Console.ReadLine();
                        manager.LoadFromFile(newPath);
                        break;

                    case "8": // Выход
                        exit = true;
                        break;

                    default:
                        Console.WriteLine("Неверный выбор! Попробуйте снова.");
                        break;
                }
            }

            Console.WriteLine("Работа программы завершена.");
        }
    }
}