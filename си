using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Lab11_PriceList
{
    // Класс, представляющий товар (процессор)
    class Product
    {
        public string Name { get; set; }
        public decimal Price { get; set; }

        public Product(string name, decimal price)
        {
            Name = name;
            Price = price;
        }

        public override string ToString()
        {
            return $"{Name} - {Price} руб.";
        }
    }

    // Класс, представляющий прайс-лист
    class PriceList
    {
        private List<Product> products = new List<Product>();

        // Добавление товара в прайс-лист
        public void AddProduct(Product product)
        {
            products.Add(product);
        }

        // Вывод всех товаров на экран
        public void DisplayAll()
        {
            Console.WriteLine("Прайс-лист процессоров:");
            Console.WriteLine("-----------------------");
            foreach (var product in products)
            {
                Console.WriteLine(product);
            }
            Console.WriteLine();
        }

        // Сортировка по названию товара
        public void SortByName()
        {
            products = products.OrderBy(p => p.Name).ToList();
        }

        // Сортировка по цене
        public void SortByPrice()
        {
            products = products.OrderBy(p => p.Price).ToList();
        }

        // Поиск самого дорогого товара
        public Product FindMostExpensive()
        {
            return products.OrderByDescending(p => p.Price).FirstOrDefault();
        }

        // Поиск самого дешевого товара
        public Product FindCheapest()
        {
            return products.OrderBy(p => p.Price).FirstOrDefault();
        }

        // Сохранение в файл
        public void SaveToFile(string filename)
        {
            using (StreamWriter writer = new StreamWriter(filename))
            {
                foreach (var product in products)
                {
                    writer.WriteLine($"{product.Name};{product.Price}");
                }
            }
            Console.WriteLine($"Прайс-лист сохранен в файл {filename}");
        }

        // Загрузка из файла
        public void LoadFromFile(string filename)
        {
            products.Clear();
            try
            {
                using (StreamReader reader = new StreamReader(filename))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        string[] parts = line.Split(';');
                        if (parts.Length == 2 && decimal.TryParse(parts[1], out decimal price))
                        {
                            products.Add(new Product(parts[0], price));
                        }
                    }
                }
                Console.WriteLine($"Прайс-лист загружен из файла {filename}");
            }
            catch (FileNotFoundException)
            {
                Console.WriteLine($"Файл {filename} не найден. Будет создан новый прайс-лист.");
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            Console.InputEncoding = Encoding.UTF8;

            PriceList priceList = new PriceList();

            // Загрузка данных из файла (если он существует)
            priceList.LoadFromFile("Процессоры.txt");

            // Если файл был пустой, добавляем демонстрационные данные
            if (priceList.FindCheapest() == null)
            {
                // Добавление демонстрационных данных (процессоров)
                priceList.AddProduct(new Product("Intel Core i9-13900K", 58990));
                priceList.AddProduct(new Product("AMD Ryzen 9 7950X", 54990));
                priceList.AddProduct(new Product("Intel Core i7-13700K", 38990));
                priceList.AddProduct(new Product("AMD Ryzen 7 7700X", 29990));
                priceList.AddProduct(new Product("Intel Core i5-13600K", 27990));
                priceList.AddProduct(new Product("AMD Ryzen 5 7600X", 22990));
                priceList.AddProduct(new Product("Intel Core i3-13100F", 11990));
                priceList.AddProduct(new Product("AMD Ryzen 3 4100", 8990));
            }

            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("Меню:");
                Console.WriteLine("1. Показать весь прайс-лист");
                Console.WriteLine("2. Сортировать по названию");
                Console.WriteLine("3. Сортировать по цене");
                Console.WriteLine("4. Найти самый дорогой процессор");
                Console.WriteLine("5. Найти самый дешевый процессор");
                Console.WriteLine("6. Сохранить прайс-лист в файл");
                Console.WriteLine("7. Выход");
                Console.Write("Выберите действие: ");

                string choice = Console.ReadLine();
                Console.WriteLine();

                switch (choice)
                {
                    case "1":
                        priceList.DisplayAll();
                        break;
                    case "2":
                        priceList.SortByName();
                        Console.WriteLine("Прайс-лист отсортирован по названию.");
                        priceList.DisplayAll();
                        break;
                    case "3":
                        priceList.SortByPrice();
                        Console.WriteLine("Прайс-лист отсортирован по цене.");
                        priceList.DisplayAll();
                        break;
                    case "4":
                        Product expensive = priceList.FindMostExpensive();
                        Console.WriteLine($"Самый дорогой процессор: {expensive}");
                        break;
                    case "5":
                        Product cheap = priceList.FindCheapest();
                        Console.WriteLine($"Самый дешевый процессор: {cheap}");
                        break;
                    case "6":
                        priceList.SaveToFile("Процессоры.txt");
                        break;
                    case "7":
                        exit = true;
                        break;
                    default:
                        Console.WriteLine("Неверный выбор. Попробуйте снова.");
                        break;
                }
            }
        }
    }
}