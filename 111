Спасибо за предоставленные файлы и уточнения! Я понял, что вы хотите создать проект для Visual Studio 2008 (C++98/03, Win32), реализующий 9 лабораторных работ, которые запускаются через графический интерфейс в **одном главном окне** (без отдельных диалоговых окон, как в предоставленном образце), с поддержкой русского языка (юникод). Проект должен соответствовать **варианту 3** (окно 450x200, светло-серый фон, курсор IDC_SIZEALL, график f(x) = 30*sin(5-3x) для Лаб. 3). В лабораторной 9 необходимо реализовать **создание и использование DLL-библиотеки** (без класса `Book`, как указано ранее). Я также учту структуру предоставленных файлов (`stdafx.h`, `stdafx.cpp`, `LabRab4.h`, `LabRab4.rc`, etc.) и создам полный набор файлов, аналогичный образцу, включая файлы решения и проекта (`LabRab9.sln`, `LabRab9.vcxproj`, etc.).

### Уточнение требований
1. **Графический интерфейс**:
   - Все 9 лабораторных работают в **одном главном окне** (размер 450x200).
   - Интерфейс включает:
     - **Меню** для выбора лабораторной работы.
     - **Элементы управления** (текстовые поля, кнопки, списки), отображаемые в главном окне в зависимости от выбранной лабораторной.
   - После выполнения лабораторной элементы управления остаются в главном окне для повторного использования.
2. **Русский язык**:
   - Полная поддержка юникода (`WCHAR`, `wstring`, `L"текст"`) для корректного отображения кириллицы.
   - Шрифты поддерживают русский язык.
3. **Темы лабораторных работ** (на основе предыдущего обсуждения и исправления):
   - Лаб. 1: Обработка массивов – Ввод массива чисел, сортировка, вывод.
   - Лаб. 2: Обработка строк – Ввод строки, подсчет слов.
   - Лаб. 3: Построение графика – График f(x) = 30*sin(5-3x) в главном окне.
   - Лаб. 4: Работа со структурами – Ввод и вывод списка студентов (имя, группа, средний балл).
   - Лаб. 5: Работа с файлами – Запись текста в файл `output.txt`, чтение и вывод.
   - Лаб. 6: Динамическая память – Создание и вывод случайной матрицы.
   - Лаб. 7: Сортировка и поиск – Сортировка массива, бинарный поиск.
   - Лаб. 8: Рекурсия – Вычисление факториала рекурсивно.
   - Лаб. 9: Создание и использование DLL – Функция в DLL (например, `SumArray` для суммы элементов массива).
4. **DLL для Лаб. 9**:
   - Создадим DLL-библиотеку (`ArrayLib`) с функцией `SumArray`.
   - Основной проект будет динамически загружать DLL и использовать функцию.
5. **Вариант 3**:
   - Окно 450x200, светло-серый фон (RGB(192, 192, 192)), курсор IDC_SIZEALL.
   - Лаб. 3: График f(x) = 30*sin(5-3x).
6. **Совместимость**:
   - Код использует C++98/03, WinAPI, стандартные библиотеки (`vector`, `string`, `fstream`, `algorithm`, `cmath`, `sstream`).
   - Проект для Visual Studio 2008, платформа Win32.
7. **Файлы проекта**:
   - Основной проект (`LabRab9`): `LabRab9.sln`, `LabRab9.vcxproj`, `LabRab9.vcxproj.filters`, `LabRab9.vcxproj.user`, `LabRab9.cpp`, `LabRab9.h`, `LabRab9.rc`, `resource.h`, `stdafx.h`, `stdafx.cpp`, `targetver.h`.
   - Проект DLL (`ArrayLib`): `ArrayLib.sln`, `ArrayLib.vcxproj`, `ArrayLib.cpp`, `ArrayLib.h`, `ArrayLib.def`.
8. **Исправление ошибок**:
   - Устранение `IDD_DIALOG undeclared identifier` (в образце нет диалогов, но я учту ресурсы для меню).
   - Предотвращение ошибок RC1004 через корректную кодировку ресурсов.

### Структура решения
Решение включает два проекта:
1. **LabRab9**: Основное приложение с главным окном, где реализуются все лабораторные.
2. **ArrayLib**: DLL-библиотека для Лаб. 9.

### Файлы проекта

#### 1. `LabRab9.sln`
```plain
Microsoft Visual Studio Solution File, Format Version 10.00
# Visual Studio 2008
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "LabRab9", "LabRab9.vcxproj", "{52E7040A-A465-4369-A672-E32BA88A201D}"
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ArrayLib", "ArrayLib.vcxproj", "{B2C3D4E5-2345-6789-0123-456789ABCDEF}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Win32 = Debug|Win32
		Release|Win32 = Release|Win32
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{52E7040A-A465-4369-A672-E32BA88A201D}.Debug|Win32.ActiveCfg = Debug|Win32
		{52E7040A-A465-4369-A672-E32BA88A201D}.Debug|Win32.Build.0 = Debug|Win32
		{52E7040A-A465-4369-A672-E32BA88A201D}.Release|Win32.ActiveCfg = Release|Win32
		{52E7040A-A465-4369-A672-E32BA88A201D}.Release|Win32.Build.0 = Release|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Debug|Win32.ActiveCfg = Debug|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Debug|Win32.Build.0 = Debug|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Release|Win32.ActiveCfg = Release|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Release|Win32.Build.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
```

#### 2. `LabRab9.vcxproj`
```xml
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{52E7040A-A465-4369-A672-E32BA88A201D}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>LabRab9</RootNamespace>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>comctl32.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <AdditionalDependencies>comctl32.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="LabRab9.cpp" />
    <ClCompile Include="stdafx.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Create</PrecompiledHeader>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="LabRab9.h" />
    <ClInclude Include="resource.h" />
    <ClInclude Include="stdafx.h" />
    <ClInclude Include="targetver.h" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="LabRab9.rc" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
```

#### 3. `LabRab9.vcxproj.filters`
```xml
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <Filter Include="Source Files">
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
    </Filter>
    <Filter Include="Header Files">
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
    </Filter>
    <Filter Include="Resource Files">
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="LabRab9.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
    <ClCompile Include="stdafx.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="LabRab9.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="resource.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="stdafx.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="targetver.h">
      <Filter>Header Files</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="LabRab9.rc">
      <Filter>Resource Files</Filter>
    </ResourceCompile>
  </ItemGroup>
</Project>
```

#### 4. `LabRab9.vcxproj.user`
```xml
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
</Project>
```

#### 5. `stdafx.h`
<xaiArtifact artifact_id="0ed9d591-0b58-4c74-a3d3-90bd9bfc1a45" artifact_version_id="5b5a661b-3019-4135-93aa-ee713b2d77f9" title="stdafx.h" contentType="text/x-c++src">
#pragma once

#include "targetver.h"

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <tchar.h>

#include <commctrl.h>
#include <commdlg.h>
#include <ctime>
#include <math.h>
#include <stdio.h>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <sstream>
</xaiArtifact>

#### 6. `stdafx.cpp`
```x-c++src
#include "stdafx.h"
```

#### 7. `targetver.h`
<xaiArtifact artifact_id="e3b3d62f-8a89-41ff-88b9-eb1821f82263" artifact_version_id="f95b0f42-807d-419c-8115-6808f89a8f44" title="targetver.h" contentType="text/x-c++src">
#pragma once

#include <SDKDDKVer.h>
</xaiArtifact>

#### 8. `LabRab9.h`
```x-c++src
#pragma once

#include "resource.h"
#include "stdafx.h"

#define ID_LAB1 40001
#define ID_LAB2 40002
#define ID_LAB3 40003
#define ID_LAB4 40004
#define ID_LAB5 40005
#define ID_LAB6 40006
#define ID_LAB7 40007
#define ID_LAB8 40008
#define ID_LAB9 40009
#define ID_EXIT 40010

#define IDC_INPUT 1001
#define IDC_OUTPUT 1002
#define IDC_EXECUTE 1003
#define IDC_LIST 1004
#define IDC_NAME 1005
#define IDC_GROUP 1006
#define IDC_SCORE 1007
#define IDC_SEARCH 1009

struct Student {
    std::wstring name;
    int group;
    double averageScore;
};
```

#### 9. `resource.h`
```x-c++src
#ifndef IDC_STATIC
#define IDC_STATIC (-1)
#endif

#define IDR_MENU1 101
#endif
```

#### 10. `LabRab9.rc`
<xaiArtifact artifact_id="596c0670-0915-43d6-8b49-43b37c3d4e02" artifact_version_id="ca64d3c1-1df5-436a-803e-65ef35936c1a" title="LabRab9.rc" contentType="text/x-winsrc">
#include "resource.h"

IDR_MENU1 MENU
BEGIN
    POPUP "Лабораторные работы"
    BEGIN
        MENUITEM "Лаб. 1: Массивы", ID_LAB1
        MENUITEM "Лаб. 2: Строки", ID_LAB2
        MENUITEM "Лаб. 3: График", ID_LAB3
        MENUITEM "Лаб. 4: Структуры", ID_LAB4
        MENUITEM "Лаб. 5: Файлы", ID_LAB5
        MENUITEM "Лаб. 6: Динамическая память", ID_LAB6
        MENUITEM "Лаб. 7: Сортировка и поиск", ID_LAB7
        MENUITEM "Лаб. 8: Рекурсия", ID_LAB8
        MENUITEM "Лаб. 9: DLL", ID_LAB9
        MENUITEM SEPARATOR
        MENUITEM "Выход", ID_EXIT
    END
END
</xaiArtifact>

#### 11. `LabRab9.cpp`
```x-c++src
#include "stdafx.h"
#include "LabRab9.h"

using namespace std;

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void CreateLabControls(HWND, int);
void ExecuteLab(HWND, int);
void DrawGraph(HWND);
long long factorial(int);

HINSTANCE hInst;
const int WINDOW_WIDTH = 450;
const int WINDOW_HEIGHT = 200;
int currentLab = 0;
HWND hInput, hOutput, hExecute, hList, hName, hGroup, hScore, hSearch;
vector<int> arr;
vector<Student> students;

int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow) {
    hInst = hInstance;
    InitCommonControls();

    WNDCLASSEX wc = { sizeof(WNDCLASSEX), CS_HREDRAW | CS_VREDRAW, WndProc, 0, 0, hInstance, 
        LoadIcon(NULL, IDI_APPLICATION), LoadCursor(NULL, IDC_SIZEALL), 
        CreateSolidBrush(RGB(192, 192, 192)), NULL, L"LabWindowClass", NULL };
    if (!RegisterClassEx(&wc)) {
        MessageBox(NULL, L"Ошибка регистрации класса окна!", L"Ошибка", MB_OK | MB_ICONERROR);
        return 1;
    }

    HWND hwnd = CreateWindow(L"LabWindowClass", L"Лабораторные работы", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, WINDOW_WIDTH, WINDOW_HEIGHT, NULL, LoadMenu(hInst, MAKEINTRESOURCE(IDR_MENU1)), hInstance, NULL);
    if (!hwnd) {
        MessageBox(NULL, L"Ошибка создания окна!", L"Ошибка", MB_OK | MB_ICONERROR);
        return 1;
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_CREATE:
        CreateLabControls(hwnd, 0);
        break;
    case WM_COMMAND:
        if (HIWORD(wParam) == BN_CLICKED && LOWORD(wParam) == IDC_EXECUTE) {
            ExecuteLab(hwnd, currentLab);
        } else {
            switch (LOWORD(wParam)) {
            case ID_LAB1: case ID_LAB2: case ID_LAB3: case ID_LAB4: case ID_LAB5:
            case ID_LAB6: case ID_LAB7: case ID_LAB8: case ID_LAB9:
                currentLab = LOWORD(wParam) - ID_LAB1 + 1;
                CreateLabControls(hwnd, currentLab);
                InvalidateRect(hwnd, NULL, TRUE);
                break;
            case ID_EXIT:
                DestroyWindow(hwnd);
                break;
            }
        }
        break;
    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        RECT rect;
        GetClientRect(hwnd, &rect);
        FillRect(hdc, &rect, CreateSolidBrush(RGB(192, 192, 192)));
        if (currentLab == 3) {
            DrawGraph(hwnd);
        }
        EndPaint(hwnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }
    return 0;
}

void CreateLabControls(HWND hwnd, int lab) {
    if (hInput) DestroyWindow(hInput);
    if (hOutput) DestroyWindow(hOutput);
    if (hExecute) DestroyWindow(hExecute);
    if (hList) DestroyWindow(hList);
    if (hName) DestroyWindow(hName);
    if (hGroup) DestroyWindow(hGroup);
    if (hScore) DestroyWindow(hScore);
    if (hSearch) DestroyWindow(hSearch);
    hInput = hOutput = hExecute = hList = hName = hGroup = hScore = hSearch = NULL;

    switch (lab) {
    case 1: // Лаб. 1: Массивы
    case 7: // Лаб. 7: Сортировка и поиск
    case 9: // Лаб. 9: DLL
        hInput = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
            10, 10, 430, 20, hwnd, (HMENU)IDC_INPUT, hInst, NULL);
        hExecute = CreateWindow(L"BUTTON", L"Выполнить", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
            10, 40, 80, 20, hwnd, (HMENU)IDC_EXECUTE, hInst, NULL);
        hOutput = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_READONLY,
            10, 70, 430, 100, hwnd, (HMENU)IDC_OUTPUT, hInst, NULL);
        if (lab == 7) {
            hSearch = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
                100, 40, 340, 20, hwnd, (HMENU)IDC_SEARCH, hInst, NULL);
        }
        break;
    case 2: // Лаб. 2: Строки
    case 5: // Лаб. 5: Файлы
    case 8: // Лаб. 8: Рекурсия
        hInput = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
            10, 10, 430, 20, hwnd, (HMENU)IDC_INPUT, hInst, NULL);
        hExecute = CreateWindow(L"BUTTON", L"Выполнить", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
            10, 40, 80, 20, hwnd, (HMENU)IDC_EXECUTE, hInst, NULL);
        hOutput = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_READONLY,
            10, 70, 430, 100, hwnd, (HMENU)IDC_OUTPUT, hInst, NULL);
        break;
    case 3: // Лаб. 3: График
        hExecute = CreateWindow(L"BUTTON", L"Построить график", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
            10, 10, 100, 20, hwnd, (HMENU)IDC_EXECUTE, hInst, NULL);
        break;
    case 4: // Лаб. 4: Структуры
        hName = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
            60, 10, 380, 20, hwnd, (HMENU)IDC_NAME, hInst, NULL);
        hGroup = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
            60, 40, 380, 20, hwnd, (HMENU)IDC_GROUP, hInst, NULL);
        hScore = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
            60, 70, 380, 20, hwnd, (HMENU)IDC_SCORE, hInst, NULL);
        CreateWindow(L"STATIC", L"Имя:", WS_CHILD | WS_VISIBLE,
            10, 10, 50, 20, hwnd, (HMENU)IDC_STATIC, hInst, NULL);
        CreateWindow(L"STATIC", L"Группа:", WS_CHILD | WS_VISIBLE,
            10, 40, 50, 20, hwnd, (HMENU)IDC_STATIC, hInst, NULL);
        CreateWindow(L"STATIC", L"Балл:", WS_CHILD | WS_VISIBLE,
            10, 70, 50, 20, hwnd, (HMENU)IDC_STATIC, hInst, NULL);
        hExecute = CreateWindow(L"BUTTON", L"Добавить", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
            10, 100, 80, 20, hwnd, (HMENU)IDC_EXECUTE, hInst, NULL);
        hList = CreateWindow(L"LISTBOX", L"", WS_CHILD | WS_VISIBLE | WS_VSCROLL | LBS_NOINTEGRALHEIGHT,
            10, 130, 430, 50, hwnd, (HMENU)IDC_LIST, hInst, NULL);
        break;
    case 6: // Лаб. 6: Динамическая память
        hInput = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
            10, 10, 430, 20, hwnd, (HMENU)IDC_INPUT, hInst, NULL);
        hExecute = CreateWindow(L"BUTTON", L"Выполнить", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
            10, 40, 80, 20, hwnd, (HMENU)IDC_EXECUTE, hInst, NULL);
        hOutput = CreateWindow(L"EDIT", L"", WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_READONLY,
            10, 70, 430, 100, hwnd, (HMENU)IDC_OUTPUT, hInst, NULL);
        break;
    }
}

void ExecuteLab(HWND hwnd, int lab) {
    switch (lab) {
    case 1: { // Лаб. 1: Массивы
        WCHAR buffer[256];
        GetWindowText(hInput, buffer, 256);
        wstringstream ss(buffer);
        arr.clear();
        int num;
        while (ss >> num) {
            arr.push_back(num);
        }
        if (arr.empty()) {
            MessageBox(hwnd, L"Введите хотя бы одно число!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        sort(arr.begin(), arr.end());
        wstringstream out;
        for (vector<int>::iterator it = arr.begin(); it != arr.end(); ++it) {
            out << *it << L" ";
        }
        SetWindowText(hOutput, out.str().c_str());
        }
        break;
    case 2: { // Лаб. 2: Строки
        WCHAR buffer[256];
        GetWindowText(hInput, buffer, 256);
        wstring str(buffer);
        if (str.empty()) {
            MessageBox(hwnd, L"Введите строку!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        int wordCount = 0;
        bool inWord = false;
        for (unsigned int i = 0; i < str.length(); ++i) {
            if (iswspace(str[i])) {
                inWord = false;
            } else if (!inWord) {
                inWord = true;
                wordCount++;
            }
        }
        wstringstream out;
        out << L"Количество слов: " << wordCount;
        SetWindowText(hOutput, out.str().c_str());
        }
        break;
    case 3: // Лаб. 3: График
        InvalidateRect(hwnd, NULL, TRUE);
        break;
    case 4: { // Лаб. 4: Структуры
        WCHAR name[100], group[10], score[10];
        GetWindowText(hName, name, 100);
        GetWindowText(hGroup, group, 10);
        GetWindowText(hScore, score, 10);
        if (wcslen(name) == 0) {
            MessageBox(hwnd, L"Введите имя студента!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        int g;
        double s;
        wstringstream ss1(group), ss2(score);
        if (!(ss1 >> g) || g <= 0) {
            MessageBox(hwnd, L"Введите корректный номер группы!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        if (!(ss2 >> s) || s < 0 || s > 100) {
            MessageBox(hwnd, L"Введите балл от 0 до 100!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        Student student = { name, g, s };
        students.push_back(student);
        wstringstream out;
        out << L"Имя: " << name << L", Группа: " << g << L", Балл: " << s;
        SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)out.str().c_str());
        SetWindowText(hName, L"");
        SetWindowText(hGroup, L"");
        SetWindowText(hScore, L"");
        }
        break;
    case 5: { // Лаб. 5: Файлы
        WCHAR buffer[256];
        GetWindowText(hInput, buffer, 256);
        wstring input(buffer);
        ofstream outFile("output.txt");
        if (!outFile) {
            MessageBox(hwnd, L"Ошибка создания файла!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        string narrowInput(input.begin(), input.end());
        outFile << narrowInput;
        outFile.close();

        ifstream inFile("output.txt");
        if (!inFile) {
            MessageBox(hwnd, L"Ошибка чтения файла!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        string line, content;
        while (getline(inFile, line)) {
            content += line + "\n";
        }
        inFile.close();
        wstring wideContent(content.begin(), content.end());
        SetWindowText(hOutput, wideContent.c_str());
        }
        break;
    case 6: { // Лаб. 6: Динамическая память
        WCHAR buffer[256];
        GetWindowText(hInput, buffer, 256);
        wstringstream ss(buffer);
        int rows, cols;
        if (!(ss >> rows >> cols) || rows <= 0 || cols <= 0) {
            MessageBox(hwnd, L"Введите два положительных числа (строки столбцы)!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        int** matrix = new int*[rows];
        for (int i = 0; i < rows; i++) {
            matrix[i] = new int[cols];
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = rand() % 100;
            }
        }
        wstringstream out;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                out << matrix[i][j] << L"\t";
            }
            out << L"\n";
        }
        for (int i = 0; i < rows; i++) {
            delete[] matrix[i];
        }
        delete[] matrix;
        SetWindowText(hOutput, out.str().c_str());
        }
        break;
    case 7: { // Лаб. 7: Сортировка и поиск
        WCHAR buffer[256], searchBuf[10];
        GetWindowText(hInput, buffer, 256);
        GetWindowText(hSearch, searchBuf, 10);
        wstringstream ss(buffer);
        arr.clear();
        int num;
        while (ss >> num) {
            arr.push_back(num);
        }
        if (arr.empty()) {
            MessageBox(hwnd, L"Введите массив!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        int target;
        wstringstream ssTarget(searchBuf);
        if (!(ssTarget >> target)) {
            MessageBox(hwnd, L"Введите число для поиска!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        sort(arr.begin(), arr.end());
        wstringstream out;
        out << L"Отсортированный массив: ";
        for (vector<int>::iterator it = arr.begin(); it != arr.end(); ++it) {
            out << *it << L" ";
        }
        vector<int>::iterator it = lower_bound(arr.begin(), arr.end(), target);
        if (it != arr.end() && *it == target) {
            out << L"\nЧисло " << target << L" найдено на позиции: " << (it - arr.begin());
        } else {
            out << L"\nЧисло " << target << L" не найдено.";
        }
        SetWindowText(hOutput, out.str().c_str());
        }
        break;
    case 8: { // Лаб. 8: Рекурсия
        WCHAR buffer[256];
        GetWindowText(hInput, buffer, 256);
        wstringstream ss(buffer);
        int n;
        if (!(ss >> n) || n < 0) {
            MessageBox(hwnd, L"Введите неотрицательное число!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        wstringstream out;
        out << L"Факториал " << n << L" = " << factorial(n);
        SetWindowText(hOutput, out.str().c_str());
        }
        break;
    case 9: { // Лаб. 9: DLL
        WCHAR buffer[256];
        GetWindowText(hInput, buffer, 256);
        wstringstream ss(buffer);
        arr.clear();
        int num;
        while (ss >> num) {
            arr.push_back(num);
        }
        if (arr.empty()) {
            MessageBox(hwnd, L"Введите массив!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        HMODULE hLib = LoadLibrary(L"ArrayLib.dll");
        if (!hLib) {
            MessageBox(hwnd, L"Не удалось загрузить ArrayLib.dll!", L"Ошибка", MB_OK | MB_ICONERROR);
            return;
        }
        typedef int (*SumArrayFunc)(int*, int);
        SumArrayFunc SumArray = (SumArrayFunc)GetProcAddress(hLib, "SumArray");
        wstringstream out;
        if (SumArray) {
            int sum = SumArray(&arr[0], arr.size());
            out << L"Сумма элементов массива (из DLL): " << sum;
        } else {
            out << L"Ошибка: не удалось загрузить функцию SumArray!";
        }
        SetWindowText(hOutput, out.str().c_str());
        FreeLibrary(hLib);
        }
        break;
    }
}

void DrawGraph(HWND hwnd) {
    HDC hdc = GetDC(hwnd);
    HPEN hPen = CreatePen(PS_SOLID, 1, RGB(0, 0, 255));
    SelectObject(hdc, hPen);

    int centerX = WINDOW_WIDTH / 2;
    int centerY = WINDOW_HEIGHT / 2;
    double scaleX = 50.0;
    double scaleY = 50.0;

    MoveToEx(hdc, 0, centerY, NULL);
    LineTo(hdc, WINDOW_WIDTH, centerY);
    MoveToEx(hdc, centerX, 0, NULL);
    LineTo(hdc, centerX, WINDOW_HEIGHT);

    for (int px = 0; px < WINDOW_WIDTH; px++) {
        double x = (px - centerX) / scaleX;
        double y = 30 * sin(5 - 3 * x);
        int py = centerY - (int)(y * scaleY / 30);
        if (px == 0) {
            MoveToEx(hdc, px, py, NULL);
        } else {
            LineTo(hdc, px, py);
        }
    }

    DeleteObject(hPen);
    ReleaseDC(hwnd, hdc);
}

long long factorial(int n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}
```

#### 12. `ArrayLib.sln`
```plain
Microsoft Visual Studio Solution File, Format Version 10.00
# Visual Studio 2008
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ArrayLib", "ArrayLib.vcxproj", "{B2C3D4E5-2345-6789-0123-456789ABCDEF}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Win32 = Debug|Win32
		Release|Win32 = Release|Win32
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Debug|Win32.ActiveCfg = Debug|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Debug|Win32.Build.0 = Debug|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Release|Win32.ActiveCfg = Release|Win32
		{B2C3D4E5-2345-6789-0123-456789ABCDEF}.Release|Win32.Build.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
```

#### 13. `ArrayLib.vcxproj`
```xml
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{B2C3D4E5-2345-6789-0123-456789ABCDEF}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>ArrayLib</RootNamespace>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <ModuleDefinitionFile>ArrayLib.def</ModuleDefinitionFile>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>WIN32;NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <ModuleDefinitionFile>ArrayLib.def</ModuleDefinitionFile>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="ArrayLib.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="ArrayLib.h" />
  </ItemGroup>
  <ItemGroup>
    <None Include="ArrayLib.def" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
```

#### 14. `ArrayLib.cpp`
```x-c++src
#include "ArrayLib.h"

extern "C" __declspec(dllexport) int SumArray(int* arr, int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return sum;
}
```

#### 15. `ArrayLib.h`
```x-c++src
#ifndef ARRAYLIB_H
#define ARRAYLIB_H

extern "C" __declspec(dllexport) int SumArray(int* arr, int size);

#endif
```

#### 16. `ArrayLib.def`
<xaiArtifact artifact_id="a75dd061-2ad0-4622-9606-4bd38173aed9" artifact_version_id="b386f979-764a-4272-9dc4-b22b6d265eb2" title="ArrayLib.def" contentType="text/plain">
LIBRARY ArrayLib
EXPORTS
    SumArray
</xaiArtifact>

### Инструкции по созданию и сборке проекта

#### 1. Настройка решения
1. Создайте папку для решения (например, `LabRab9Solution`).
2. Поместите файлы основного проекта в папку `LabRab9Solution\LabRab9`:
   - `LabRab9.sln`, `LabRab9.vcxproj`, `LabRab9.vcxproj.filters`, `LabRab9.vcxproj.user`
   - `LabRab9.cpp`, `LabRab9.h`, `LabRab9.rc`, `resource.h`, `stdafx.h`, `stdafx.cpp`, `targetver.h`
3. Поместите файлы DLL-проекта в папку `LabRab9Solution\ArrayLib`:
   - `ArrayLib.sln`, `ArrayLib.vcxproj`, `ArrayLib.cpp`, `ArrayLib.h`, `ArrayLib.def`
4. Откройте `LabRab9.sln` в Visual Studio 2008.
5. Убедитесь, что оба проекта (`LabRab9` и `ArrayLib`) отображаются в Solution Explorer.

#### 2. Настройка проектов
- **LabRab9**:
  - В `Project Properties`:
    - `General` -> `Character Set` -> `Use Unicode Character Set`.
    - `Linker` -> `System` -> `SubSystem` -> `Windows`.
    - `Linker` -> `Input` -> `Additional Dependencies` -> `comctl32.lib`.
    - `C/C++` -> `Precompiled Headers` -> `Use Precompiled Header` для `LabRab9.cpp`, `Create Precompiled Header` для `stdafx.cpp`.
  - Убедитесь, что все файлы включены в проект.
- **ArrayLib**:
  - В `Project Properties`:
    - `General` -> `Configuration Type` -> `Dynamic Library (.dll)`.
    - `Linker` -> `Input` -> `Module Definition File` -> `ArrayLib.def`.
    - `C/C++` -> `Precompiled Headers` -> `Not Using Precompiled Headers`.
  - Убедитесь, что `ArrayLib.cpp`, `ArrayLib.h`, `ArrayLib.def` включены.
- Установите зависимость:
  - В Solution Explorer: `Solution 'LabRab9' -> Properties -> Project Dependencies`.
  - Для `LabRab9` отметьте `ArrayLib` как зависимость.
- Настройте пути вывода:
  - Для обоих проектов: `General` -> `Output Directory` -> `$(SolutionDir)$(ConfigurationName)`.

#### 3. Сборка и запуск
1. Выберите конфигурацию `Debug` или `Release`.
2. Нажмите `F7` для сборки решения.
3. Убедитесь, что `ArrayLib.dll` создана в папке `Debug` или `Release` вместе с `LabRab9.exe`.
4. Нажмите `F5` для запуска `LabRab9`.

#### 4. Использование программы
1. Запустите программу (`F5`).
2. Появится окно 450x200 с меню "Лабораторные работы".
3. Выберите лабораторную из меню:
   - **Лаб. 1, 2, 5, 6, 8, 9**: Появятся поле ввода, кнопка "Выполнить", поле вывода.
   - **Лаб. 3**: Появится кнопка "Построить график", график рисуется в окне.
   - **Лаб. 4**: Появятся поля для ввода студента (имя, группа, балл), кнопка "Добавить", список.
   - **Лаб. 7**: Появятся поле для массива, поле для числа поиска, кнопка "Выполнить", поле вывода.
4. Введите данные и нажмите "Выполнить" (или "Добавить" для Лаб. 4, "Построить график" для Лаб. 3).
5. Результат отображается в поле вывода или списке.
6. Выберите другую лабораторную или "Выход".

### Проверка функционала
- **Лаб. 1**: Ввод "1 3 2", вывод "1 2 3".
- **Лаб. 2**: Ввод "Привет, мир!", вывод "Количество слов: 2".
- **Лаб. 3**: Нажатие "Построить график", отображается график f(x) = 30*sin(5-3x).
- **Лаб. 4**: Ввод студента (имя, группа, балл), добавление в список.
- **Лаб. 5**: Ввод текста, запись в `output.txt`, вывод содержимого.
- **Лаб. 6**: Ввод "3 4", вывод матрицы 3x4.
- **Лаб. 7**: Ввод "5 2 8 1" и "2", вывод массива и позиции.
- **Лаб. 8**: Ввод "5", вывод "Факториал 5 = 120".
- **Лаб. 9**: Ввод "1 2 3 4", вывод "Сумма элементов массива (из DLL): 10".

### Дополнительно
- **Ошибки**:
  - Если возникает RC1004, сохраните `LabRab9.rc` в ANSI: `File -> Save LabRab9.rc As` -> выберите ANSI.
  - Если `ArrayLib.dll` не загружается, проверьте, находится ли она в папке с `LabRab9.exe`.
- **Файл `output.txt`**: Создается в папке проекта (Лаб. 5). Проверьте права на запись.
- **Улучшения**: Если нужны другие функции в DLL или изменения в лабораторных, уточните.
- **Архив**: Если нужен ZIP-архив с проектом, напишите.

Пожалуйста, протестируйте проект и сообщите, работает ли он и соответствуют ли лабораторные вашим ожиданиям! Если есть замечания или нужно скорректировать темы лабораторных, дайте знать.
